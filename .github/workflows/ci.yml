name: CI/CD Workflow

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  frontend-tests:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend
    steps:
      - name: Clonar repositorio
        uses: actions/checkout@v4

      - name: Configurar Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Instalar dependencias
        run: npm install

      - name: Run tests with coverage (Vitest)
        run: npx vitest run --coverage

      - name: Upload coverage report frontend
        uses: actions/upload-artifact@v4
        with:
          name: coverage-frontend
          path: frontend/coverage

  build-frontend:
    needs: frontend-tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend
    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v4

      - name: Configurar Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Instalar dependencias
        run: npm install

      - name: Build del proyecto
        run: npm run build

      - name: Comprimir build para deploy
        run: |
          tar -czf build.tar.gz dist/
          echo "Build comprimido creado"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/build.tar.gz # üëà corregido, ruta completa

  deploy-prod:
    needs: [frontend-tests, build-frontend]
    if: github.ref == 'refs/heads/main' && needs.frontend-tests.result == 'success'
    runs-on: ubuntu-latest
    environment: Production
    name: Deploy to Production

    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v4

      - name: Descargar build
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: . # lo descarga a la ra√≠z del job

      - name: Configurar Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Verificar URL de deploy
        run: |
          if [ -z "${{ secrets.VERCEL_DEPLOY_URL }}" ]; then
            echo "‚ùå ERROR: La URL de deploy no est√° configurada"
            exit 1
          else
            echo "‚úÖ URL de deploy encontrada"
            echo "URL: ${{ secrets.VERCEL_DEPLOY_URL }}"
          fi

      - name: Descomprimir build
        run: |
          mkdir -p deploy-dist
          tar -xzf build.tar.gz -C deploy-dist/
          echo "Build descomprimido"

      - name: Deploy usando la API de Vercel
        run: |
          echo "üöÄ Iniciando deploy via API de Vercel..."

          # Crear un zip del directorio de build
          cd deploy-dist
          zip -r ../deploy.zip .
          cd ..

          # Hacer el deploy usando la URL de integraci√≥n
          curl -f -X POST \
            -H "Content-Type: application/zip" \
            --data-binary "@deploy.zip" \
            "${{ secrets.VERCEL_DEPLOY_URL }}"

          if [ $? -eq 0 ]; then
            echo "‚úÖ Deploy completado exitosamente via API"
          else
            echo "‚ùå Error en el deploy via API"
            exit 1
          fi

      - name: Confirmaci√≥n final
        run: |
          echo "üéâ FLUJO COMPLETADO EXITOSAMENTE"
          echo "üìã CI: ‚úÖ PAS√ì"
          echo "üöÄ CD: ‚úÖ DEPLOY COMPLETADO"
