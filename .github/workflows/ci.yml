name: CI/CD Workflow

on: 
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  frontend-tests:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend
    steps:
      - name: Clonar repositorio
        uses: actions/checkout@v4

      - name: Configurar Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Instalar dependencias
        run: npm install

      - name: Run tests with coverage (Vitest)
        run: npx vitest run --coverage 

      - name: Upload coverage report frontend
        uses: actions/upload-artifact@v4
        with:
          name: coverage-frontend
          path: frontend/coverage

  build-frontend:
    needs: frontend-tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend
    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v4

      - name: Configurar Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Instalar dependencias
        run: npm install

      - name: Build del proyecto
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/dist

  deploy-prod:
    needs: [frontend-tests, build-frontend]
    if: github.ref == 'refs/heads/main' && needs.frontend-tests.result == 'success'
    runs-on: ubuntu-latest
    environment: Production
    name: Deploy to Production
    
    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v4

      - name: Descargar build artifacts
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: frontend/dist

      - name: Configurar Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Instalar Vercel CLI
        run: npm install -g vercel@latest

      - name: Verificar token de Vercel
        run: |
          if [ -z "${{ secrets.VERCEL_TOKEN }}" ]; then
            echo "‚ùå ERROR: El token VERCEL_TOKEN no est√° configurado"
            exit 1
          else
            echo "‚úÖ Token VERCEL_TOKEN encontrado"
          fi

      - name: Deploy a Producci√≥n con Vercel
        run: |
          echo "üöÄ Iniciando deploy con Vercel..."
          cd frontend
          
          # Opci√≥n 1: Deploy con build expl√≠cito (RECOMENDADO)
          vercel --token ${{ secrets.VERCEL_TOKEN }} --prod --confirm
          
          # Opci√≥n 2: Forzar redeploy completo
          # vercel --token ${{ secrets.VERCEL_TOKEN }} --prod --force
          
          echo "‚úÖ Deploy completado exitosamente"

      - name: Verificar deploy
        run: |
          echo "üéâ FLUJO COMPLETADO EXITOSAMENTE"
          echo "üìã CI: ‚úÖ PAS√ì"
          echo "üöÄ CD: ‚úÖ DEPLOY COMPLETADO"